{"name":"Roy","body":"Roy\r\n===\r\n\r\nRoy is a tiny module that aims to make any Ruby object Rack-friendly and\r\nprovide it with a REST-like interface.\r\n\r\nRoy tries to be as less invasive as possible. It provides your objects with a\r\n`#call` method that takes a Rack environment and dispatches to a regular method\r\nnamed after the HTTP method you want to catch.\r\n\r\n## Tests\r\n\r\nYou can execute the tests by running `rake test`. They are written with\r\nMiniTest.\r\n\r\n## Example\r\n\r\n``` ruby\r\nclass MessageQueue\r\n  include Roy\r\n\r\n  roy allow: [:get, :post, :delete]\r\n\r\n  def initialize\r\n    @stack = []\r\n  end\r\n\r\n  def get(_)\r\n    @stack.inspect\r\n  end\r\n\r\n  def post(_)\r\n    roy.halt 403 unless roy.params[:item]\r\n    @stack << roy.params[:item].strip\r\n    get\r\n  end\r\n\r\n  def delete(_)\r\n    @stack.shift.inspect\r\n  end\r\nend\r\n```\r\n\r\n## Docs\r\n\r\n### Configuration\r\n\r\nThe `roy` class method is mainly used to define access control and method\r\nprefix. You can also define your own options.  The following example should be\r\nself-explanatory enough:\r\n\r\n``` ruby\r\nclass Example\r\n  include Roy\r\n  roy allow: [:get], prefix: :http_, foo: \"bar\"\r\n\r\n  def http_get(path)\r\n    \"foo is #{roy.conf.foo}\"\r\n  end\r\nend\r\n```\r\n### Environment\r\n\r\nInside your handler methods, you have access to a `roy` readable attribute which\r\nis an OpenStruct containing at least the following fields:\r\n\r\n* `env`: the Rack environment\r\n* `response`: a `Rack::Response` object that will be returned by `call`\r\n* `request`: a `Rack::Request` build from the environment\r\n* `headers`: a hash of headers that is part of `response`\r\n* `params`: parameters extracted from the query string and the request body\r\n* `conf`: the configuration set via `::roy`\r\n\r\nThe keys for `params` can be accessed either via a `String` or a `Symbol`\r\n\r\n### Control flow\r\n\r\nYour handler methods are run inside a `catch` block which will catch the `:halt`\r\nsymbol. You can then use `throw` to abort a method but you must return an array\r\ncomposed of a status code and a message.\r\n\r\nRoy provides a `roy.halt` method that takes a status code and an optional message.\r\nIf there is no message it uses the default message from\r\n`Rack::Utils::HTTP_STATUS_CODES`\r\n\r\n### Plugins\r\n\r\nVarious plugins are shipped with Roy, here is the full list:\r\n\r\n* **after**: modify the response after the app has been called\r\n* **before**: modify the environment before calling the app\r\n* **render**: integration with Tilt\r\n* **plugins**: a simple plugin loader\r\n\r\nEach plugin is designed to do only one thing. Thus it is very easy to take a\r\nlook at the code and see how the plugin works.\r\n","tagline":"make your objects REST-friendly","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}